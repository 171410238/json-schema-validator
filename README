
This is an implementation of the JSON Schema specification (see:
http://www.json-schema.org/). Most implementations today are written in
JavaScript, but this one is pure Java. This allows pure server side JSON schema
validation if this is what you are looking for.

The draft helping as a reference is, at the moment, draft version 3 (version 4
is around the corner, for some defintion of "corner" -- understand, days, or a
few weeks). This implementation supports, as of now, ALL of the schema EXCEPT
$ref (which may, or may not be, a stopgap to the usage of this project), and
custom "simple types" (the draft theoretically allows for one to register atomic
type names as schemas).

Version 0.1 is days away. It WILL be published on Maven. It WILL have complete
Javadoc. It WILL have local-only "$ref" support (ie: { "$ref":
"#/some/json/path/here" }. But before this happens, $ref needs to be
implemented.

Sample usage:

----
public final void SampleValidation()
{
    public static void main(final String... args)
    {
        //
        // See the Jackson API to grab a schema. JasonHelper has a
        // classpath-only retrieval mechanism, if you want to have a schema from
        // another source, consider ObjectMapper from the Jackson API.
        //
        // Here, "schema" is the JSON document representing the schema, and
        // "instance" is the JSON document to validate.
    
        final JsonNode schema = ..., instance = ....;
    
        final JsonValidator validator = new JsonValidator(schema);
    
        //
        // A ValidationReport object contains the state of validation. Right now
        // it ALWAYS collects validation failure messages, as deep as it can. In
        // the future, a version will exist which will NOT collect messages but
        // which will answer correctly to the true/false method below:
        //
    
        final ValidationReport report = validator.validate(instance);
    
        if (validator.isSuccess())
            //
            // OMG ponnies! We have a success!
            //
            //
            // This sample exits with 0 (as any well-behaved standalone
            // executable is supposed todo on success), but of course this is
            // just an example
            //
            System.exit(0);
    
        //
        // On failure, with the default (as of now) ValidationReport object, you
        // can collect error messages. This sample prints them out.
        //
    
        final List<String> errs = report.getMessages();
    
        for (final String err: errs)
            System.err.println(err);

        // Everything BUT 0 here -- behave
        System.exit(1);
    }
}
----
