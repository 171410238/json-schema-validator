{
    "additionalItems": [
        {
            "schema": {
                "additionalItems": true
            },
            "valid": true
        },
        {
            "schema": {
                "additionalItems": {}
            },
            "valid": true
        },
        {
            "schema": {
                "additionalItems": "no"
            },
            "valid": false,
            "messages": [
                "field additionalItems has wrong type string, expected one of [boolean, object]"
            ]
        }
    ],
    "additionalProperties": [
        {
            "schema": {
                "additionalProperties": true
            },
            "valid": true
        },
        {
            "schema": {
                "additionalProperties": {}
            },
            "valid": true
        },
        {
            "schema": {
                "additionalProperties": [ 1, 2, 3 ]
            },
            "valid": false,
            "messages": [
                "field additionalProperties has wrong type array, expected one of [boolean, object]"
            ]
        }
    ],
    "dependencies": [
        {
            "schema": {
                "dependencies": {
                    "a": "b",
                    "c": {
                        "type": [ "string", "boolean" ]
                    }
                }
            },
            "valid": true
        },
        {
            "schema": {
                "dependencies": false
            },
            "valid": false,
            "messages": [
                "field dependencies has wrong type boolean, expected one of [object]"
            ]
        },
        {
            "schema": {
                "dependencies": {
                    "a": 3,
                    "b": [ {} ]
                }
            },
            "valid": false,
            "messages": [
                "dependencies: illegal value of type integer",
                "a dependency array should only contain property names"
            ]
        }
    ],
    "description": [
        {
            "schema": {
                "description": "hello"
            },
            "valid": true
        },
        {
            "schema": {
                "description": 3.24
            },
            "valid": false,
            "messages": [
                "field description has wrong type number, expected one of [string]"
            ]
        }
    ],
    "disallow": [
        {
            "schema": {
                "disallow": "string"
            },
            "valid": true
        },
        {
            "schema": {
                "disallow": "any"
            },
            "valid": true
        },
        {
            "schema": {
                "disallow": [ "boolean", { "$ref": "#/schema2" } ]
            },
            "valid": true
        },
        {
            "schema": {
                "disallow": false
            },
            "valid": false,
            "messages": [
                "field disallow has wrong type boolean, expected one of [array, string]"
            ]
        },
        {
            "schema": {
                "disallow": "hammer"
            },
            "valid": false,
            "messages": [
                "disallow: unknown type hammer"
            ]
        },
        {
            "schema": {
                "disallow": [ "boolean", {}, []]
            },
            "valid": false,
            "messages": [
                "invalid element of type array in disallow array"
            ]
        }
    ],
    "divisibleBy": [
        {
            "schema": {
                "divisibleBy": 3
            },
            "valid": true
        },
        {
            "schema": {
                "divisibleBy": 0.0
            },
            "valid": false,
            "messages": [
                "divisibleBy is 0"
            ]
        },
        {
            "schema": {
                "divisibleBy": "anything"
            },
            "valid": false,
            "messages": [
                "field divisibleBy has wrong type string, expected one of [integer, number]"
            ]
        }
    ],
    "$ref": [
        {
            "schema": {
                "$ref": "#"
            },
            "valid": true
        },
        {
            "schema": {
                "$ref": "http://json-schema.org/schema/v3#/a/b"
            },
            "valid": true
        },
        {
            "schema": {
                "$ref": false
            },
            "valid": false,
            "messages": [
                "field $ref has wrong type boolean, expected one of [string]"
            ]
        },
        {
            "schema": {
                "$ref": "+23:"
            },
            "valid": false,
            "messages": [
                "$ref is an invalid URI"
            ]
        }
    ],
    "$schema": [
        {
            "schema": {
                "$schema": "#"
            },
            "valid": true
        },
        {
            "schema": {
                "$schema": "http://json-schema.org/schema/v3#/a/b"
            },
            "valid": true
        },
        {
            "schema": {
                "$schema": false
            },
            "valid": false,
            "messages": [
                "field $schema has wrong type boolean, expected one of [string]"
            ]
        },
        {
            "schema": {
                "$schema": "+23:"
            },
            "valid": false,
            "messages": [
                "$schema is an invalid URI"
            ]
        }
    ],
    "enum": [
        {
            "schema": {
                "enum": []
            },
            "valid": true
        },
        {
            "schema": {
                "enum": 1
            },
            "valid": false,
            "messages": [
                "field enum has wrong type integer, expected one of [array]"
            ]
        }
    ],
    "exclusiveMaximum": [
        {
            "schema": {
                "maximum": 3,
                "exclusiveMaximum": false
            },
            "valid": true
        },
        {
            "schema": {
                "maximum": 3,
                "exclusiveMaximum": "no"
            },
            "valid": false,
            "messages": [
                "field exclusiveMaximum has wrong type string, expected one of [boolean]"
            ]
        },
        {
            "schema": {
                "exclusiveMaximum": true
            },
            "valid": false,
            "messages": [
                "exclusiveMaximum without maximum"
            ]
        }
    ],
    "exclusiveMinimum": [
        {
            "schema": {
                "minimum": 3,
                "exclusiveMinimum": false
            },
            "valid": true
        },
        {
            "schema": {
                "minimum": 3,
                "exclusiveMinimum": "no"
            },
            "valid": false,
            "messages": [
                "field exclusiveMinimum has wrong type string, expected one of [boolean]"
            ]
        },
        {
            "schema": {
                "exclusiveMinimum": true
            },
            "valid": false,
            "messages": [
                "exclusiveMinimum without minimum"
            ]
        }
    ],
    "extends": [
        {
            "schema": {
                "extends": {
                    "type": "string"
                }
            },
            "valid": true
        },
        {
            "schema": {
                "extends": [{"what": "ever"}, {"you": "want"}, {}]
            },
            "valid": true
        },
        {
            "schema": {
                "extends": 42
            },
            "valid": false,
            "messages": [
                "field extends has wrong type integer, expected one of [array, object]"
            ]
        },
        {
            "schema": {
                "extends": [ 1, true, "boo" ]
            },
            "valid": false,
            "messages": [
                "non schema element in extends array",
                "non schema element in extends array",
                "non schema element in extends array"
            ]
        }
    ],
    "format": [
        {
            "schema": {
                "format": "datetime"
            },
            "valid": true
        },
        {
            "schema": {
                "format": {}
            },
            "valid": false,
            "messages": [
                "field format has wrong type object, expected one of [string]"
            ]
        }
    ],
    "id": [
        {
            "schema": {
                "id": "#"
            },
            "valid": true
        },
        {
            "schema": {
                "id": "http://json-schema.org/schema/v3#/a/b"
            },
            "valid": true
        },
        {
            "schema": {
                "id": false
            },
            "valid": false,
            "messages": [
                "field id has wrong type boolean, expected one of [string]"
            ]
        },
        {
            "schema": {
                "id": "+23:"
            },
            "valid": false,
            "messages": [
                "id is an invalid URI"
            ]
        }
    ],
    "items": [
        {
            "schema": {
                "items": {}
            },
            "valid": true
        },
        {
            "schema": {
                "items": [{}, {}]
            },
            "valid": true
        },
        {
            "schema": {
                "items": null
            },
            "valid": false,
            "messages": [
                "field items has wrong type null, expected one of [array, object]"
            ]
        },
        {
            "schema": {
                "items": [ {}, 5, true]
            },
            "valid": false,
            "messages": [
                "non schema element in items array",
                "non schema element in items array"
            ]
        }
    ],
    "maximum": [
        {
            "schema": {
                "maximum": 30
            },
            "valid": true
        },
        {
            "schema": {
                "maximum": -64.23114
            },
            "valid": true
        },
        {
            "schema": {
                "maximum": "unbounded"
            },
            "valid": false,
            "messages": [
                "field maximum has wrong type string, expected one of [integer, number]"
            ]
        }
    ],
    "maxItems": [
        {
            "schema": {
                "maxItems": 20
            },
            "valid": true
        },
        {
            "schema": {
                "maxItems": 12339809814981293098102938
            },
            "valid": false,
            "messages": [
                "maxItems is too large"
            ]
        },
        {
            "schema": {
                "maxItems": -33
            },
            "valid": false,
            "messages": [
                "maxItems is negative"
            ]
        },
        {
            "schema": {
                "maxItems": 3.1
            },
            "valid": false,
            "messages": [
                "field maxItems has wrong type number, expected one of [integer]"
            ]
        }
    ],
    "maxLength": [
        {
            "schema": {
                "maxLength": 20
            },
            "valid": true
        },
        {
            "schema": {
                "maxLength": 12339809814981293098102938
            },
            "valid": false,
            "messages": [
                "maxLength is too large"
            ]
        },
        {
            "schema": {
                "maxLength": -33
            },
            "valid": false,
            "messages": [
                "maxLength is negative"
            ]
        },
        {
            "schema": {
                "maxLength": 3.1
            },
            "valid": false,
            "messages": [
                "field maxLength has wrong type number, expected one of [integer]"
            ]
        }
    ],
    "minimum": [
        {
            "schema": {
                "minimum": 30
            },
            "valid": true
        },
        {
            "schema": {
                "minimum": -64.23114
            },
            "valid": true
        },
        {
            "schema": {
                "minimum": "unbounded"
            },
            "valid": false,
            "messages": [
                "field minimum has wrong type string, expected one of [integer, number]"
            ]
        }
    ],
    "minItems": [
        {
            "schema": {
                "minItems": 20
            },
            "valid": true
        },
        {
            "schema": {
                "minItems": 12339809814981293098102938
            },
            "valid": false,
            "messages": [
                "minItems is too large"
            ]
        },
        {
            "schema": {
                "minItems": -33
            },
            "valid": false,
            "messages": [
                "minItems is negative"
            ]
        },
        {
            "schema": {
                "minItems": 3.1
            },
            "valid": false,
            "messages": [
                "field minItems has wrong type number, expected one of [integer]"
            ]
        }
    ],
    "minLength": [
        {
            "schema": {
                "minLength": 20
            },
            "valid": true
        },
        {
            "schema": {
                "minLength": 12339809814981293098102938
            },
            "valid": false,
            "messages": [
                "minLength is too large"
            ]
        },
        {
            "schema": {
                "minLength": -33
            },
            "valid": false,
            "messages": [
                "minLength is negative"
            ]
        },
        {
            "schema": {
                "minLength": 3.1
            },
            "valid": false,
            "messages": [
                "field minLength has wrong type number, expected one of [integer]"
            ]
        }
    ],
    "patternProperties": [
        {
            "schema": {
                "patternProperties": {
                    "a+": {},
                    "z/": {}
                }
            },
            "valid": true
        },
        {
            "schema": {
                "patternProperties": {
                    "a++": {},
                    "^[a-zA-Z\\d]+$": false
                }
            },
            "valid": false,
            "messages": [
                "patternProperties: invalid regex a++",
                "non schema value in patternProperties"
            ]
        },
        {
            "schema": {
                "patternProperties": 2
            },
            "valid": false,
            "messages": [
                "field patternProperties has wrong type integer, expected one of [object]"
            ]
        }
    ],
    "pattern": [
        {
            "schema": {
                "pattern": "a+"
            },
            "valid": true
        },
        {
            "schema": {
                "pattern": "f*+"
            },
            "valid": false,
            "messages": [
                "invalid regex in pattern"
            ]
        },
        {
            "schema": {
                "pattern": [1, 2, 3]
            },
            "valid": false,
            "messages": [
                "field pattern has wrong type array, expected one of [string]"
            ]
        }
    ],
    "properties": [
        {
            "schema": {
                "properties": {
                    "p1": {},
                    "p2": {
                        "required": true
                    }
                }
            },
            "valid": true
        },
        {
            "schema": {
                "properties": null
            },
            "valid": false,
            "messages": [
                "field properties has wrong type null, expected one of [object]"
            ]
        },
        {
            "schema": {
                "properties": {
                    "p1": 3,
                    "p2": {
                        "required": "yes"
                    }
                }
            },
            "valid": false,
            "messages": [
                "non schema value in properties",
                "required attribute is not a boolean"
            ]
        }
    ],
    "title": [
        {
            "schema": {
                "title": "a day in hell"
            },
            "valid": true
        },
        {
            "schema": {
                "title": 42.3
            },
            "valid": false,
            "messages": [
                "field title has wrong type number, expected one of [string]"
            ]
        }
    ],
    "type": [
        {
            "schema": {
                "type": "string"
            },
            "valid": true
        },
        {
            "schema": {
                "type": "any"
            },
            "valid": true
        },
        {
            "schema": {
                "type": [ "boolean", { "$ref": "#/schema2" } ]
            },
            "valid": true
        },
        {
            "schema": {
                "type": false
            },
            "valid": false,
            "messages": [
                "field type has wrong type boolean, expected one of [array, string]"
            ]
        },
        {
            "schema": {
                "type": "hammer"
            },
            "valid": false,
            "messages": [
                "type: unknown type hammer"
            ]
        },
        {
            "schema": {
                "type": [ "boolean", {}, []]
            },
            "valid": false,
            "messages": [
                "invalid element of type array in type array"
            ]
        }
    ],
    "uniqueItems": [
        {
            "schema": {
                "uniqueItems": true
            },
            "valid": true
        },
        {
            "schema": {
                "uniqueItems": "yes please"
            },
            "valid": false,
            "messages": [
                "field uniqueItems has wrong type string, expected one of [boolean]"
            ]
        }
    ]
}
